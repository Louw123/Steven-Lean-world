msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Sat Apr 12 04:44:36 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.Inception
msgid "Inception"
msgstr ""

#: Game.Levels.Inception
msgid "Garnet: In order to begin, I have to show you how lean prove things.\n"
"There are two parts that are important for you, and so I have to unfuse myself in order to explain those important things to you.\n"
"\n"
"Ruby: There are two areas you can go. Both of them build on eachother.\n"
"\n"
"Saphire: So completing one will help you figure out how to complete the other.\n"
"Ruby and saphire: So lets begin!"
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Simple tactics"
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Ruby: Lets look at our first tactic: `rfl`\n"
"\n"
"rfl stands for `reflexivity of equality`. This states that a=a will be allways be a=a no matter what you change.\n"
"Try it out."
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Given n, prove that n is equal to n"
msgstr ""

#: Game.Levels.Ruby.Simple_tactics
msgid "Ruby: There you go. Lets see annother tactic."
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Rewrite â†’ Respond"
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Ruby: Lets look at our next tactic: `rw` and `rewrite`\n"
"Both of then do the same thing. However there is one difference between them.\n"
"Figure it out."
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Given that a is equal to n, prove that a = n"
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "Ruby: Heres the difference `rw` has `rfl` built in while `rewrite` does not.\n"
"This means that in order for you to finish the goal, you must use `rfl` after the `rewrite` in order to close the goal.\n"
"`rewrite` is not used allot in proofs because of this. You know what to do now."
msgstr ""

#: Game.Levels.Ruby.Rewrite_respond
msgid "There you go. Thats all you need.\n"
"More tactics are available in later levels."
msgstr ""

#: Game.Levels.Ruby
msgid "Ruby"
msgstr ""

#: Game.Levels.Ruby
msgid "Ruby: Tactics are importtant to lean. Tactics are used to change, create, and close goals.\n"
"Lets see some tactics."
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "Reflexivity"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "Saphire:Lets look at our first theorem: rfl\n"
"\n"
"`rfl` stands for `reflexivity of equality`. This states that a=a will be allways be a=a, no matter what you change.\n"
"`rfl` only works if the both sides of the equal sign is exactly the same. (e.g. a=a, b=b)\n"
"However, simple arithmetic proofs can also be proven via the theorem`rfl`.\n"
"Lets try it."
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "Given a, prove that a = a"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "saphire: Well done. Lets see another theorem of rfl"
msgstr ""

#: Game.Levels.Saphire.Reflexivity
msgid "`apply` is a fundemental tactic in lean.\n"
"Without it all other tactics dont exist.\n"
"It allows you to manipulate the proof without `rw`.\n"
"This is useful when using a proof in which it does not obey the `a=b` format."
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "add_zero"
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Saphire: Lets look at our first proof add_zero.\n"
"We will learn more what â„• is in the next world, but we will ignore it for right now."
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Given n as a Nat, prove that a plus 0 equals a"
msgstr ""

#: Game.Levels.Saphire.add_zero
msgid "Saphire: Well done."
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "add_succ"
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "Saphire: Lets look at our final proof for this world add_succ.\n"
"We will learn more what â„• is in the next world, but we will ignore it for right now."
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "Given n as a Nat, prove that a plus 0 equals a"
msgstr ""

#: Game.Levels.Saphire.add_succ
msgid "Saphire: Well done. Now we have all of the theorems needed for our next world."
msgstr ""

#: Game.Levels.Saphire
msgid "Saphire"
msgstr ""

#: Game.Levels.Saphire
msgid "Saphire: Theorems are important to prove anything in lean. Even the simpliest theorem require a multitude of therorems to prove that theorem.\n"
"We are going to use simple theorems, and make simple proofs that in which will be used in a later world.\n"
"When you use a tactic, lean `apply`s a multitude of subsequent proofs to it.\n"
"You can just use apply to finish every single goal.\n"
"So for right now, we will be only using `apply` to prove proofs."
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "numbers"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "Garnet: Before we begin we must know how numbers are handled in lean.\n"
"All numbers are shown are in â„•, or the Natual numbers. Natual numbers are numbers that are whole and not negative.\n"
"There are two cases that â„• uses:\n"
"`zero =>` it means that the case of the target number is zero\n"
"`succ =>` it means that the target number is a `succ`essor of the number.\n"
"In this world a successor of a number is a number plus 1 ($$succ n=n+1$$)."
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "two plus two equals four"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "Garnet: There we go. You must know that all numbers are under this assumption of succesion.\n"
"A number (A) is a successor of (A-1).\n"
"You can extrapolate it to infinity if infinity is a countable number in the natual numbers.\n"
"Now lets prove zero_add and succ_add before proving addition communality."
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "Self explanatory"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "Self explanatory"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "Self explanatory"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "Self explanatory"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "This theorem says any number n plus a (succ)essor of n is equal to n. $$a+succ(b)=succ(a+b)$$"
msgstr ""

#: Game.Levels.Garnet.numberlogic
msgid "the proof that Nat.zero is equal to the number zero."
msgstr ""

#: Game.Levels.Garnet.induction
msgid "Induction"
msgstr ""

#: Game.Levels.Garnet.induction
msgid "Garnet: `inducton` is a tactic that allows you to split a goal into two goals.\n"
"Using the two cases we can use that I mentioned before, we can set up the induction tactic like this:\n"
"`\n"
"induction n with\n"
"|zero => ?_\n"
"|succ => ?_\n"
"`\n"
"Garnet: You can change the `?_` if you like. Lean counts them as a synthetic hole.\n"
"Like any hole you can put anything into it.\n"
"Now lets prove zero_add."
msgstr ""

#: Game.Levels.Garnet.induction
msgid "given n is a Non-negative number, zero plus n is equal to n"
msgstr ""

#: Game.Levels.Garnet.induction
msgid "Garnet:We have to prove that zero plus zero is equal to zero. This case is simple"
msgstr ""

#: Game.Levels.Garnet.induction
msgid "Garnet: It is recomended to use `simp` for this part for simp will replace `zero` as 0."
msgstr ""

#: Game.Levels.Garnet.induction
msgid "Garnet: Now we have to prove that zero plus the successor of a is equal to the successor of a"
msgstr ""

#: Game.Levels.Garnet.induction
msgid "Garnet: Good job. All tactics for now on are available. We need these tactics later on."
msgstr ""

#: Game.Levels.Garnet.induction
msgid "induction splits a goal in two, depending on what type it is.\n"
"For example Nat (or â„•) is an inductive type that can split into two cases:\n"
"`zero` and `succ`.\n"
"You first prove the `zero` case first, next you use the theorem to prove `succ`."
msgstr ""

#: Game.Levels.Garnet.induction
msgid "simp simplifies the proof."
msgstr ""

#: Game.Levels.Garnet.induction
msgid ""
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "add_succ"
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "Garnet: Lets use the same technique with add zero and impliment succ_add.\n"
"Here we are working with successors. `rfl` wont work with complicated variables like this.\n"
"Lets use induction instead"
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "given a and b is a Non-negative number, a successor of a plus b is equal to the successor of a plus b"
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "Garnet: I recomend useing the inductive tactic of a."
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "Garnet: We cant prove this using the theorems we have.\n"
"To prove it you must, switch the values.\n"
"There is a theorem, but we cant prove that until we prove this."
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "Garnet: This time we must prove that 1 + b is equal to 1 +(0 + b) in which it is equal to one.\n"
"It is recomended for you to use `zero_eq_zero` for this."
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "Garnet: This time we must prove that the successor of (the successor of a number) plus a different number is equal to the successor to the successor for annother number plus annother number.\n"
"Thanks to the induction tactic we now have a hypothesis showing the theorem we proved before."
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "use Nat.add_succ to move the successors in."
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "Garnet: Good job, now we can prove the communicative proprety of addition."
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "this theorem says that n+0 is equal to zero"
msgstr ""

#: Game.Levels.Garnet.add_succ
msgid "proof that zero plus a is equal to a."
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "add_comm"
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "Garnet: now lets figure out add_succ. You may do it yourself."
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "given a and b are nat, prove that a plus b is equal to b plus a"
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "Garnet: We must use induction in order for us to prove this."
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "Garnet:This proof can be solved via Nat.add_succ and Nat.succ_add."
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "Garnet: This proof is way more difficult, but can. be solved via by useing add_succ and s"
msgstr ""

#: Game.Levels.Garnet.add_comm
msgid "Garnet: There you go. Now lets finally prove add_assoc."
msgstr ""

#: Game.Levels.Garnet.add_assoc
msgid "add_assoc"
msgstr ""

#: Game.Levels.Garnet.add_assoc
msgid "Garnet: now lets figure out add_succ. You may do it yourself."
msgstr ""

#: Game.Levels.Garnet.add_assoc
msgid "Garnet: There you go. Now you now know how to use lean for arrithmatic.\n"
"To learn more about arrithmatic logic play \"Natural Number Game\" in lean.\n"
"But for right now, find the other crystal gems."
msgstr ""

#: Game.Levels.Garnet.add_assoc
msgid "This theorem proves that a successor of m plus n is equal to succ added by m and n."
msgstr ""

#: Game.Levels.Garnet
msgid "Garnet"
msgstr ""

#: Game.Levels.Garnet
msgid "Garnet: Now, we can begin with simple arithmatic proofs and work our way up from here.\n"
"I will guide you through for more complicated assumptions.\n"
"\n"
"Garnet: Before we begin it is recomended that you press </>, in order to change to editor mode.\n"
"Otherwise we can contine on.\n"
"\n"
"Garnet:It is also reccomended that if you dont have all the proofs needed to complete the proof\n"
"click on the house and move the rules slider down to none until you complete the world"
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "Simpcity implies simplicity"
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "Pearl: I read through all text books that are made by the humans.\n"
"One of the humans named \"RenÃ© Descartes\" kick started skeptism and logic.\n"
"He started it off with this simple proof:\n"
"cogito, ergo sum./I think, therefore I am\n"
"This is a great starting point for a simple proof. We can formalize this into this:\n"
"I think implies that I am.\n"
"Prepositional logic only proves the variables. Meaning we dont know if the variable true or false.\n"
"Lets say that `A` is means thinking and existing.\n"
"We can start the proof by using the intro."
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "Given that A is a preposition, A implies A"
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "Pearl:Now we must prove the proof via `assumption` or `exact` to close the goal."
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "Pearl: Thats great, lets see if we can prove preopsition logic using and"
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "intro creates a assumption if the proof implies something.\n"
"Can be given a costom name if you use the name in the intro tactic"
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "assumption closes a proof if the proof is exactly the assumption."
msgstr ""

#: Game.Levels.Pearl.Simpcity_implies_simplicity
msgid "exact closes a proof if the proof is exactly the assumption that is used in the tactic.."
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Talking to you"
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Pearl: Think about this: You know that im talking to you. We are in same space. This means, that I and you are in the same room.\n"
"If we say that P is me, and Y as you, we can build a proof via an and stantemnt."
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Given that Y and p are Prop, that A is P and B is Y, prove that P and Y is true."
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Pearl:This proof cant be solved via intro. We must use `constructor` to break the and case down into two cases"
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Pearl:This proof can be solved via `exact` or `assumption`."
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Pearl: Thats great, lets see if we can prove preopsition logic using not."
msgstr ""

#: Game.Levels.Pearl.Talking
msgid "Constructor splits the proof into two proofs. In which you have to prove."
msgstr ""

#: Game.Levels.Pearl.Space
msgid "Space"
msgstr ""

#: Game.Levels.Pearl.Space
msgid "Pearl: We are not in outer space.\n"
"If we are talking in outer space then you die, but we are in some sort of outer space right?\n"
"We can prove this using not. We wont use `assumption`.\n"
"You must use `contradiction` to solve this proof."
msgstr ""

#: Game.Levels.Pearl.Space
msgid "Pearl: We can start with intro."
msgstr ""

#: Game.Levels.Pearl.Space
msgid "Pearl: We can prove the proof using contradiction or by apply absurd."
msgstr ""

#: Game.Levels.Pearl.Space
msgid "Pearl: Thats great, lets see if we can prove preopsition logic using or"
msgstr ""

#: Game.Levels.Pearl.Space
msgid "Contradiction proves a logical contradiction, using the absurd theorem."
msgstr ""

#: Game.Levels.Pearl.Space
msgid "This one is simular to exact however, it proves a contradiction."
msgstr ""

#: Game.Levels.Pearl.space_or_time
msgid "Talking to you"
msgstr ""

#: Game.Levels.Pearl.space_or_time
msgid "Pearl: Think about this: Which one do you travel back and forth through space or time?\n"
"If S repersents space and T repersents time we can prove this via or. or has a special proprety that allows you to prove one side or the other."
msgstr ""

#: Game.Levels.Pearl.space_or_time
msgid "Pearl: The left and right tactics are useful in manipulating or proofs.\n"
"An example of the use of this tactic is this proof. You can use the left or right tactic."
msgstr ""

#: Game.Levels.Pearl.space_or_time
msgid "Pearl: Thats great, lets see if we can prove implications."
msgstr ""

#: Game.Levels.Pearl.space_or_time
msgid "left grabs the left side of or"
msgstr ""

#: Game.Levels.Pearl.space_or_time
msgid "right grabs the right side of or"
msgstr ""

#: Game.Levels.Pearl.modus_ponens
msgid "modus_tollens"
msgstr ""

#: Game.Levels.Pearl.modus_ponens
msgid "Pearl:modus ponens is latin for \"affirming mode\".\n"
"This proof is usefull in coverting one item to annother.\n"
"We can use the `revert` tactic."
msgstr ""

#: Game.Levels.Pearl.modus_ponens
msgid "Given that hpq is P implies Q, and p is P, Prove q"
msgstr ""

#: Game.Levels.Pearl.modus_ponens
msgid "Pearl:you know what to do now."
msgstr ""

#: Game.Levels.Pearl.modus_ponens
msgid "Pearl:There we go. Now lets prove modus_tollens."
msgstr ""

#: Game.Levels.Pearl.modus_ponens
msgid "Revert does the opposite the intro."
msgstr ""

#: Game.Levels.Pearl.modus_tollens
msgid "modus_ponens"
msgstr ""

#: Game.Levels.Pearl.modus_tollens
msgid "Pearl:modus tollens is latin for \"mode that denies by denying\".\n"
"This proof is usefull in coverting one item to annother."
msgstr ""

#: Game.Levels.Pearl.modus_tollens
msgid "Pearl:you can use `have'` to get P â†’ Q via a and Â«{a_1}Â» using this: `have c:= a Â«{a_1}Â»`"
msgstr ""

#: Game.Levels.Pearl.modus_tollens
msgid "Pearl: congrats on completing, my world now you only have one more world for this level.\n"
"To learn more about logic proving, you can play: \"A Lean Intro to Logic\""
msgstr ""

#: Game.Levels.Pearl
msgid "Pearl"
msgstr ""

#: Game.Levels.Pearl
msgid "Pearl: Logic gives order to chaos. Without it, we wont understand anything.\n"
"Even the simplist things must obey simple logic. Logic has many forms.\n"
"Our form of logic is called Prepositional logic.\n"
"We will start with a simple proof."
msgstr ""

#: Game.Levels.Amethyst.relation
msgid "relation"
msgstr ""

#: Game.Levels.Amethyst.relation
msgid "Amethyst: First you must know the basics.\n"
"An element is a part of a set, or a group of things.\n"
"For example I can group a house, a city, and a satilite as a man-made things.\n"
"To show that an element in a set you use the \"âˆˆ\" symbol. We can use `apply` to prove exact sets."
msgstr ""

#: Game.Levels.Amethyst.relation
msgid "Amethyst: Great, we can now show what âŠ† is."
msgstr ""

#: Game.Levels.Amethyst.Subsets
msgid "subsets"
msgstr ""

#: Game.Levels.Amethyst.Subsets
msgid "Amethyst: âŠ† is called a subset.\n"
"It shows that the element of A is the same element in B"
msgstr ""

#: Game.Levels.Amethyst.Subsets
msgid "Amethyst: A Subset changes the set, from A to B. You can use apply to change the proof use `apply Â«{h1}Â»`,\n"
"then you can use apply Â«{h2}Â»"
msgstr ""

#: Game.Levels.Amethyst.Subsets
msgid "Amethyst: Great, we can now see what âˆ© is."
msgstr ""

#: Game.Levels.Amethyst.intersection
msgid "Intersection"
msgstr ""

#: Game.Levels.Amethyst.intersection
msgid "Amethyst: An intersection says that there one element that is the same for both sets."
msgstr ""

#: Game.Levels.Amethyst.intersection
msgid "Amethyst:We can use cases to split the intersection into two hypotheses."
msgstr ""

#: Game.Levels.Amethyst.intersection
msgid "Amethyst:Now we can apply Â«{right}Â» to close the proof"
msgstr ""

#: Game.Levels.Amethyst.intersection
msgid "There we go go to the surrounding worlds, or go to the next level."
msgstr ""

#: Game.Levels.Amethyst.intersection
msgid "This tactic splits the case into two. For `âˆ§`/`âˆ©`, it creates two hypothesis,\n"
"while `âˆ¨`/`âˆª` Splits the proof into two goals."
msgstr ""

#: Game.Levels.Amethyst
msgid "Amethyst"
msgstr ""

#: Game.Levels.Amethyst
msgid "Amethyst: sup, Welcome my world.\n"
"This world will talk about set theory.\n"
"This is one of the well known branches of what humans call \"Mathematics.\"\n"
"We will start with a simple statement."
msgstr ""

#: Game.Levels.Steven.Functions
msgid "functions"
msgstr ""

#: Game.Levels.Steven.Functions
msgid "Steven: A function is a method that takes in one thing, and outputs one thing.\n"
"for example if i have a function $x(y)=y+1$.\n"
"If we replace y in $x(y)$ with a number then it will output the numebr plus one.\n"
"Functions in lean are shown with the `fun a â†¦ b` syntax.\n"
"Now lets look at one of the functions, isEven.\n"
"  It takes in one argument `a` and returns true if the boolean if the number is divisible by two.\n"
"  To unfold functions you can use the `unfold` Use `unfold isEven` to begin the proof."
msgstr ""

#: Game.Levels.Steven.Functions
msgid "now you can just use rfl to finish the proof"
msgstr ""

#: Game.Levels.Steven.Functions
msgid "Steven: Corgrats, you proved your first function. Lets prove annother function."
msgstr ""

#: Game.Levels.Steven.Functions
msgid "It takes in one argument `a` and returns true if the boolean if the number is divisible by two."
msgstr ""

#: Game.Levels.Steven.Functions
msgid "Applies and shows the contents of the function"
msgstr ""

#: Game.Levels.Steven.Opposite
msgid "Opposite"
msgstr ""

#: Game.Levels.Steven.Opposite
msgid "Steven: Now lets look at annother function: isOdd\n"
"It takes in one argument `a` and returns true if the boolean if the number is not divisible by two.\n"
"Do the same thing you did with the previous proof"
msgstr ""

#: Game.Levels.Steven.Opposite
msgid "now you can just use rfl to finish the proof"
msgstr ""

#: Game.Levels.Steven.Opposite
msgid "Steven: Great, thats all you need to know.\n"
"You can pick a World, or up to the next world"
msgstr ""

#: Game.Levels.Steven.Opposite
msgid "It takes in one argument `a` and returns true if the boolean if the number is not divisible by two."
msgstr ""

#: Game.Levels.Steven
msgid "Steven"
msgstr ""

#: Game.Levels.Steven
msgid "Steven: Hello there, my name is steven universe.\n"
"If you have met them, they are the crystal gems.\n"
"I am helping them with one of Lâˆƒâˆ€N's important part, functions.\n"
"We will look at how functions work."
msgstr ""

#: Game
msgid "Hello World Game"
msgstr ""

#: Game
msgid "Through some sort of accident you tried when making a wormhole. You accidentally enter a different world.\n"
"There are living breathing humans arround. You thought that you are home. Just then, you notice, the big donut store.\n"
"You realize that you are in beach city and that you are in the world, know as steven universe.\n"
"You know that steven, and the crystal gems are powerful enough to take you back to home.\n"
"However, when meeting them, you quickly realize that they are working on something. They are working on the something in the 'Lâˆƒâˆ€N: theorem prover'\n"
"Just before you leave and figure out a different way a gem spots you.\n"
"\n"
"Garnet: Hello there human. Looks like you come from a different world. Your memory could have been erased with the trip, or maybe not.\n"
"I and the crystal gems will help you learn how to prove things in lean and in doing so will figure out how to fix the portal.\n"
"However, I want you to know what Lâˆƒâˆ€N Is\n"
"\n"
"\n"
"Lâˆƒâˆ€N is a proof asistant and a flexible language that allows you to create proofs, by using tactics to try and prove the proof.\n"
"We will start with simple proofs and beginner tactics to more advanced proofs, to logic in sets and functional proofs"
msgstr ""

#: Game
msgid "Steven universe and its characters is the proprety of cartoon network and by proxy, turner broadcasting.\n"
"This is a fan-made creation, not an offical cartoon network product.\n"
"Ruby image is by Gord0Hong0 in the Steven universe wiki.\n"
"Saphire image is by TheOffColors in the Steven universe wiki.\n"
"Garnet image is by Zombiewizard45 in the Steven universe wiki.\n"
"Pearl image is by RylerGamerDBS, uploaded by Zacatero in the Steven universe wiki.\n"
"Amethyst imaage is by Zombiewizard45 in the Steven universe wiki.\n"
"Steven image is by TheOffColors in the Steven universe wiki."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "A steven universe story for the Lean theorem prover. Great for beginners."
msgstr ""
